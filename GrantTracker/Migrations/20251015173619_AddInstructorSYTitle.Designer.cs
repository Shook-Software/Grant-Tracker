// <auto-generated />
using System;
using GrantTracker.Dal.Schema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GrantTracker.Migrations
{
    [DbContext(typeof(GrantTrackerContext))]
    [Migration("20251015173619_AddInstructorSYTitle")]
    partial class AddInstructorSYTitle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("GTkr")
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrantTracker.Dal.Schema.Activity", b =>
                {
                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ActivityGuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar")
                        .HasComment("Abbreviation of the label for use in frontend dropdowns.");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar")
                        .HasComment("Extended description of the activity for future use and ensuring the activity is well explained in the event it's label is unhelpful.");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar")
                        .HasComment("Short textual description of the activity type for use in frontend dropdowns.");

                    b.HasKey("Guid");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.ToTable("Activity", "GTkr", t =>
                        {
                            t.HasComment("Lookup table for session activity types.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.AttendanceRecord", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InstanceDate")
                        .HasColumnType("date")
                        .HasComment("Specific date that the session took place on. Only one record is allowed per diem.");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("SessionGuid", "InstanceDate")
                        .IsUnique();

                    b.ToTable("AttendanceRecord", "GTkr", t =>
                        {
                            t.HasComment("Base record for attendance on a given date.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.AuditLog", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Action")
                        .HasColumnType("tinyint")
                        .HasComment("");

                    b.Property<DateTime>("ChangeDateTime")
                        .HasColumnType("datetime")
                        .HasComment("");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasComment("");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasComment("");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("");

                    b.HasKey("Guid");

                    b.ToTable("AuditLog", "GTkr", t =>
                        {
                            t.HasComment("Change log for the database.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.FamilyAttendanceRecord", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceRecordGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("FamilyMember")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("StudentSchoolYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("AttendanceRecordGuid");

                    b.HasIndex("StudentSchoolYearGuid");

                    b.ToTable("FamilyAttendanceRecord", "GTkr", t =>
                        {
                            t.HasComment("Log for family attendance, tied to the base attendance record and a student school year.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.FundingSource", b =>
                {
                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FundingGuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar")
                        .HasComment("Abbreviation of the label for use in frontend dropdowns.");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar")
                        .HasComment("Extended description of the source for future use and ensuring the source is well explained in the event it's label is unhelpful.");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasComment("Short textual description of the funding source for use in frontend dropdowns.");

                    b.HasKey("Guid");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.ToTable("FundingSource", "GTkr", t =>
                        {
                            t.HasComment("Lookup table for session funding sources.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Identity", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Claim")
                        .HasColumnType("tinyint");

                    b.HasKey("Guid");

                    b.ToTable("Identity", "GTkr", t =>
                        {
                            t.HasComment("User authentication for assignment of authorization claims. Only display this information to top-level users. Never send it to the front-end otherwise.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorAttendanceRecord", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceRecordGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstructorSchoolYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSubstitute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Guid");

                    b.HasIndex("AttendanceRecordGuid");

                    b.HasIndex("InstructorSchoolYearGuid", "AttendanceRecordGuid")
                        .IsUnique();

                    b.ToTable("InstructorAttendanceRecord", "GTkr", t =>
                        {
                            t.HasComment("Records for instructor attendance, stemming from a base attendance record for an instance date.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorAttendanceTimeRecord", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EntryTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ExitTime")
                        .HasColumnType("time");

                    b.Property<Guid>("InstructorAttendanceRecordGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("InstructorAttendanceRecordGuid");

                    b.ToTable("InstructorAttendanceTimeRecord", "GTkr", t =>
                        {
                            t.HasComment("Records for instructor attendance, with the start and end times. Multiple can exist for a single day.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorRegistration", b =>
                {
                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstructorSchoolYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionGuid", "InstructorSchoolYearGuid");

                    b.HasIndex("InstructorSchoolYearGuid");

                    b.ToTable("InstructorRegistration", "GTkr", t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorSchoolYear", b =>
                {
                    b.Property<Guid>("InstructorSchoolYearGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstructorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPendingDeletion")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrganizationYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("InstructorSchoolYearGuid");

                    b.HasIndex("OrganizationYearGuid");

                    b.HasIndex("StatusGuid");

                    b.HasIndex("InstructorGuid", "OrganizationYearGuid")
                        .IsUnique();

                    b.ToTable("InstructorSchoolYear", "GTkr", t =>
                        {
                            t.HasComment("An instructor at a school during a given school year.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorSchoolYearStudentGroupMap", b =>
                {
                    b.Property<Guid>("InstructorSchoolYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentGroupGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InstructorSchoolYearGuid", "StudentGroupGuid");

                    b.HasIndex("StudentGroupGuid");

                    b.ToTable("InstructorSchoolYearStudentGroupMap", "GTkr", t =>
                        {
                            t.HasComment("Maps student groups to an instructor school year.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorStatus", b =>
                {
                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusGuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar")
                        .HasComment("Abbreviation of the label for use in frontend dropdowns.");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar")
                        .HasComment("Extended description of the objective for future use and ensuring the objective is well explained in the event it's label is unhelpful.");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasComment("Short textual description of the objective for use in frontend dropdowns.");

                    b.HasKey("Guid");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.ToTable("InstructorStatus", "GTkr", t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.LookupDefinition", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar")
                        .HasComment("Useful description of what is being defined.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar")
                        .HasComment("Name of the definition.");

                    b.HasKey("Guid");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LookupDefinition", "GTkr", t =>
                        {
                            t.HasComment("Lookup table for persistent attributes.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.LookupValue", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("DefinitionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar")
                        .HasComment("Useful description of the value.");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar")
                        .HasComment("Name of the value.");

                    b.HasKey("Guid");

                    b.HasIndex("DefinitionGuid");

                    b.ToTable("LookupValue", "GTkr", t =>
                        {
                            t.HasComment("Lookup table for persistent attributes' values and their meaning.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Objective", b =>
                {
                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ObjectiveGuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar")
                        .HasComment("Abbreviation of the label for use in frontend dropdowns.");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar")
                        .HasComment("Extended description of the objective for future use and ensuring the objective is well explained in the event it's label is unhelpful.");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar")
                        .HasComment("Short textual description of the objective for use in frontend dropdowns.");

                    b.HasKey("Guid");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.ToTable("Objective", "GTkr", t =>
                        {
                            t.HasComment("Lookup table for session objective option definitions.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Organization", b =>
                {
                    b.Property<Guid>("OrganizationGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrganizationGuid");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Organization", "GTkr", t =>
                        {
                            t.HasComment("Organizations such as sites, a group of administrators, etc.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.OrganizationAttendanceGoal", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("OrganizationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("RegularAttendeeCountThreshold")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Guid");

                    b.HasIndex("OrganizationGuid");

                    b.ToTable("OrganizationAttendanceGoal", "GTkr", t =>
                        {
                            t.HasComment("Attendance goals for the given date range.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.OrganizationBlackoutDate", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("OrganizationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("OrganizationGuid", "Date")
                        .IsUnique();

                    b.ToTable("OrganizationBlackoutDate", "GTkr", t =>
                        {
                            t.HasComment("A date where no attendance is expected to be entered, removing it from attendance lists, attendance check report, and possibly other functionalities.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.OrganizationType", b =>
                {
                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrganizationGuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar")
                        .HasComment("Abbreviation of the label for use in frontend dropdowns.");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar")
                        .HasComment("Extended description of the type for future use and ensuring the type is well explained in the event it's label is unhelpful.");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasComment("Short textual description of the funding source for use in frontend dropdowns.");

                    b.HasKey("Guid");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.ToTable("OrganizationType", "GTkr", t =>
                        {
                            t.HasComment("Lookup table for session organization types.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.OrganizationYear", b =>
                {
                    b.Property<Guid>("OrganizationYearGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("YearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationYearGuid");

                    b.HasIndex("YearGuid");

                    b.HasIndex("OrganizationGuid", "YearGuid")
                        .IsUnique();

                    b.ToTable("OrganizationYear", "GTkr", t =>
                        {
                            t.HasComment("An organization during a given school year.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.PartnershipType", b =>
                {
                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PartnershipGuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar")
                        .HasComment("Abbreviation of the label for use in frontend dropdowns.");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar")
                        .HasComment("Extended description of the partnership for future use and ensuring the partnership is well explained in the event it's label is unhelpful.");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasComment("Short textual description of the partnership type for use in frontend dropdowns.");

                    b.HasKey("Guid");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.ToTable("Partnership", "GTkr", t =>
                        {
                            t.HasComment("Lookup table for session partnership types.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.PayrollPeriod", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AdjustmentDeadline")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PayrollYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PortalChangeEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PortalChangeStartDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Guid");

                    b.HasIndex("PayrollYearGuid");

                    b.ToTable("PayrollPeriod", "GTkr", t =>
                        {
                            t.HasComment("A payroll period of two weeks that belongs to a single payroll year.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.PayrollYear", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Guid");

                    b.ToTable("PayrollYear", "GTkr", t =>
                        {
                            t.HasComment("Base table payroll years.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.PayrollYearGrantTrackerYearMap", b =>
                {
                    b.Property<Guid>("GrantTrackerYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayrollYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GrantTrackerYearGuid", "PayrollYearGuid");

                    b.HasIndex("PayrollYearGuid");

                    b.ToTable("PayrollYearGrantTrackerYearMap", "GTkr", t =>
                        {
                            t.HasComment("Maps payroll years to grant tracker years.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Person", b =>
                {
                    b.Property<Guid>("PersonGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasComment("The given, legal first name for a person.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasComment("The given, legal last name(s) for a person.");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonGuid");

                    b.ToTable("Person", "GTkr", t =>
                        {
                            t.HasComment("Basic information that is ubiquitous to all people stored for use in the Grant Tracker.");
                        });

                    b.HasDiscriminator<string>("PersonType").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Session", b =>
                {
                    b.Property<Guid>("SessionGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FirstSession")
                        .HasColumnType("date")
                        .HasComment("Date of the first session.");

                    b.Property<Guid>("FundingSourceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastSession")
                        .HasColumnType("date")
                        .HasComment("Date of the first session.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasComment("Name of the session, set by a responsible party.");

                    b.Property<Guid>("OrganizationTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationYearGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("");

                    b.Property<Guid>("PartnershipTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Recurring")
                        .HasColumnType("bit")
                        .HasComment("");

                    b.Property<Guid>("SessionTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionGuid");

                    b.HasIndex("ActivityGuid");

                    b.HasIndex("FundingSourceGuid");

                    b.HasIndex("OrganizationTypeGuid");

                    b.HasIndex("OrganizationYearGuid");

                    b.HasIndex("PartnershipTypeGuid");

                    b.HasIndex("SessionTypeGuid");

                    b.ToTable("Session", "GTkr", t =>
                        {
                            t.HasComment("Base table for sessions in the database. Contains the universal attributes any session contains.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionBlackoutDate", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("SessionGuid", "Date")
                        .IsUnique();

                    b.ToTable("SessionBlackoutDates", "GTkr", t =>
                        {
                            t.HasComment("A date where no attendance is expected to be entered, removing it from attendance lists, attendance check report, and possibly other functionalities.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionDaySchedule", b =>
                {
                    b.Property<Guid>("SessionDayGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<byte>("DayOfWeek")
                        .HasColumnType("tinyint")
                        .HasComment("Enumerated representation for day of the week, Sunday = 1, Monday = 2, ..., Saturday = 7. Handled by EfCore ValueConverters automatically.");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionDayGuid");

                    b.HasIndex("SessionGuid");

                    b.ToTable("SessionDaySchedule", "GTkr", t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionGrade", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("GradeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("GradeGuid");

                    b.HasIndex("SessionGuid", "GradeGuid")
                        .IsUnique();

                    b.ToTable("SessionGrade", "GTkr", t =>
                        {
                            t.HasComment("Each row designates one of the allowable grade levels for a session.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionObjective", b =>
                {
                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ObjectiveGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionGuid", "ObjectiveGuid");

                    b.HasIndex("ObjectiveGuid");

                    b.ToTable("SessionObjective", "GTkr", t =>
                        {
                            t.HasComment("Many to many mapping for session objectives.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionTimeSchedule", b =>
                {
                    b.Property<Guid>("SessionTimeGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasComment("Time of day the session ends, Arizona time.");

                    b.Property<Guid>("SessionDayGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasComment("Time of day the session starts, Arizona time.");

                    b.HasKey("SessionTimeGuid");

                    b.HasIndex("SessionDayGuid");

                    b.ToTable("SessionTimeSchedule", "GTkr", t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionType", b =>
                {
                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SessionTypeGuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar")
                        .HasComment("Abbreviation of the label for use in frontend dropdowns.");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar")
                        .HasComment("Extended description of the type for future use and ensuring the type is well explained in the event it's label is unhelpful.");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasComment("Short textual description of the type for use in frontend dropdowns.");

                    b.HasKey("Guid");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.ToTable("SessionType", "GTkr", t =>
                        {
                            t.HasComment("Lookup table for session types.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.RegularAttendeeDate", b =>
                {
                    b.Property<DateTime>("DateOfRegularAttendance")
                        .HasColumnType("date");

                    b.Property<Guid>("OrganizationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.AttendanceCheckDbModel", b =>
                {
                    b.Property<DateTime>("InstanceDate")
                        .HasColumnType("date");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.CCLC10ViewModel", b =>
                {
                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatricNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Session")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.ClassSummaryDbModel", b =>
                {
                    b.Property<string>("ActivityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AvgDailyAttendance")
                        .HasColumnType("float");

                    b.Property<double>("AvgHoursPerDay")
                        .HasColumnType("float");

                    b.Property<string>("DaysOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FirstSession")
                        .HasColumnType("date");

                    b.Property<string>("FundingSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSession")
                        .HasColumnType("date");

                    b.Property<string>("Objective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WeeksToDate")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.PayrollAuditDb", b =>
                {
                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EntryTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ExitTime")
                        .HasColumnType("time");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InstanceDate")
                        .HasColumnType("date");

                    b.Property<Guid>("InstructorSchoolYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSubstitute")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalAttendees")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.ProgramViewModel", b =>
                {
                    b.Property<double>("AvgStudentAttendDaysPerWeek")
                        .HasColumnType("float");

                    b.Property<double>("AvgStudentAttendHoursPerWeek")
                        .HasColumnType("float");

                    b.Property<double>("AvgStudentDailyAttendance")
                        .HasColumnType("float");

                    b.Property<int>("FamilyAttendanceCount")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegularStudentCount")
                        .HasColumnType("int");

                    b.Property<int>("StudentDaysOfferedCount")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.ScheduleReport", b =>
                {
                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.SiteSessionDbModel", b =>
                {
                    b.Property<string>("ActivityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttendeeCount")
                        .HasColumnType("int");

                    b.Property<string>("FundingSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grades")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InstanceDate")
                        .HasColumnType("date");

                    b.Property<string>("InstructorFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartnershipType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionType")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.StaffMember", b =>
                {
                    b.Property<string>("BadgeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InstructorSchoolYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<short>("SchoolYear")
                        .HasColumnType("smallint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.StaffSummaryDbModel", b =>
                {
                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InstructorSchoolYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.StudentSurveyViewModel", b =>
                {
                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatricNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.TotalActivityViewModel", b =>
                {
                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalAttendees")
                        .HasColumnType("int");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.TotalFamilyAttendanceDbModel", b =>
                {
                    b.Property<string>("FamilyMember")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatricNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.Reporting.TotalStudentAttendanceViewModel", b =>
                {
                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatricNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.SessionAttendance", b =>
                {
                    b.Property<DateTime>("InstanceDate")
                        .HasColumnType("date");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Sprocs.StudentDaysAttendedDTO", b =>
                {
                    b.Property<int>("DaysAttended")
                        .HasColumnType("int");

                    b.Property<string>("MatricNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentAttendanceRecord", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceRecordGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentSchoolYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("AttendanceRecordGuid");

                    b.HasIndex("StudentSchoolYearGuid", "AttendanceRecordGuid")
                        .IsUnique();

                    b.ToTable("StudentAttendanceRecord", "GTkr", t =>
                        {
                            t.HasComment("Records for student attendance, stemming from a base attendance record for an instance date. Only one can exist per base record.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentAttendanceTimeRecord", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EntryTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ExitTime")
                        .HasColumnType("time");

                    b.Property<Guid>("StudentAttendanceRecordGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("StudentAttendanceRecordGuid");

                    b.ToTable("StudentAttendanceTimeRecord", "GTkr", t =>
                        {
                            t.HasComment("Records for student attendance, with the start and end times. Multiple can exist for a single day.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentGroup", b =>
                {
                    b.Property<Guid>("GroupGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupGuid");

                    b.HasIndex("OrganizationYearGuid");

                    b.ToTable("StudentGroup", "GTkr", t =>
                        {
                            t.HasComment("Groupings of students to attach to instructors or extended for use elsewhere.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentGroupItem", b =>
                {
                    b.Property<Guid>("GroupGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentSchoolYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupGuid", "StudentSchoolYearGuid");

                    b.HasIndex("StudentSchoolYearGuid");

                    b.ToTable("StudentGroupItem", "GTkr", t =>
                        {
                            t.HasComment("Represents a single student school year belonging to a grouping of students.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentRegistration", b =>
                {
                    b.Property<Guid>("StudentSchoolYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayScheduleGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentSchoolYearGuid", "DayScheduleGuid");

                    b.HasIndex("DayScheduleGuid");

                    b.ToTable("StudentRegistration", "GTkr", t =>
                        {
                            t.HasComment("Contains student registrees for a session, so that students can be added and expected for filling out their attendance record.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentSchoolYear", b =>
                {
                    b.Property<Guid>("StudentSchoolYearGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<Guid>("OrganizationYearGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentSchoolYearGuid");

                    b.HasIndex("OrganizationYearGuid");

                    b.HasIndex("StudentGuid");

                    b.ToTable("StudentSchoolYear", "GTkr", t =>
                        {
                            t.HasComment("A student at a school during a given school year.");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Year", b =>
                {
                    b.Property<Guid>("YearGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsCurrentSchoolYear")
                        .HasColumnType("bit");

                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<short>("SchoolYear")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("YearGuid");

                    b.HasIndex("SchoolYear", "Quarter")
                        .IsUnique();

                    b.HasIndex("YearGuid", "IsCurrentSchoolYear")
                        .IsUnique()
                        .HasFilter("[IsCurrentSchoolYear] = 1");

                    b.ToTable("Year", "GTkr", t =>
                        {
                            t.HasComment("A school year split into quarters.");

                            t.HasCheckConstraint("CK_StartDate_Before_EndDate", "[StartDate] < [EndDate]");
                        });
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Instructor", b =>
                {
                    b.HasBaseType("GrantTracker.Dal.Schema.Person");

                    b.Property<string>("BadgeNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasComment("Some rare exceptions may not have a badge number, as free input must be allowed. Not required, but supply a badge number when possible.");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Student", b =>
                {
                    b.HasBaseType("GrantTracker.Dal.Schema.Person");

                    b.Property<string>("MatricNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.AttendanceRecord", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.Session", "Session")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("SessionGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.FamilyAttendanceRecord", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.AttendanceRecord", "AttendanceRecord")
                        .WithMany("FamilyAttendance")
                        .HasForeignKey("AttendanceRecordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.StudentSchoolYear", "StudentSchoolYear")
                        .WithMany("FamilyAttendance")
                        .HasForeignKey("StudentSchoolYearGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceRecord");

                    b.Navigation("StudentSchoolYear");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Identity", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.InstructorSchoolYear", "SchoolYear")
                        .WithOne("Identity")
                        .HasForeignKey("GrantTracker.Dal.Schema.Identity", "Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorAttendanceRecord", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.AttendanceRecord", "AttendanceRecord")
                        .WithMany("InstructorAttendance")
                        .HasForeignKey("AttendanceRecordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.InstructorSchoolYear", "InstructorSchoolYear")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("InstructorSchoolYearGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceRecord");

                    b.Navigation("InstructorSchoolYear");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorAttendanceTimeRecord", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.InstructorAttendanceRecord", "InstructorAttendanceRecord")
                        .WithMany("TimeRecords")
                        .HasForeignKey("InstructorAttendanceRecordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstructorAttendanceRecord");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorRegistration", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.InstructorSchoolYear", "InstructorSchoolYear")
                        .WithMany("SessionRegistrations")
                        .HasForeignKey("InstructorSchoolYearGuid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.Session", "Session")
                        .WithMany("InstructorRegistrations")
                        .HasForeignKey("SessionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstructorSchoolYear");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorSchoolYear", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.Instructor", "Instructor")
                        .WithMany("InstructorSchoolYears")
                        .HasForeignKey("InstructorGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.OrganizationYear", "OrganizationYear")
                        .WithMany("InstructorSchoolYears")
                        .HasForeignKey("OrganizationYearGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.InstructorStatus", "Status")
                        .WithMany("InstructorYears")
                        .HasForeignKey("StatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("OrganizationYear");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorSchoolYearStudentGroupMap", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.InstructorSchoolYear", "InstructorSchoolYear")
                        .WithMany()
                        .HasForeignKey("InstructorSchoolYearGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.StudentGroup", "Group")
                        .WithMany()
                        .HasForeignKey("StudentGroupGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("InstructorSchoolYear");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.LookupValue", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.LookupDefinition", "Definition")
                        .WithMany("Values")
                        .HasForeignKey("DefinitionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.OrganizationAttendanceGoal", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.Organization", "Organization")
                        .WithMany("AttendanceGoals")
                        .HasForeignKey("OrganizationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.OrganizationBlackoutDate", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.Organization", "Organization")
                        .WithMany("BlackoutDates")
                        .HasForeignKey("OrganizationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.OrganizationYear", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.Organization", "Organization")
                        .WithMany("Years")
                        .HasForeignKey("OrganizationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.Year", "Year")
                        .WithMany("Organizations")
                        .HasForeignKey("YearGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.PayrollPeriod", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.PayrollYear", "PayrollYear")
                        .WithMany("Periods")
                        .HasForeignKey("PayrollYearGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayrollYear");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.PayrollYearGrantTrackerYearMap", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.Year", "GrantTrackerYear")
                        .WithMany()
                        .HasForeignKey("GrantTrackerYearGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.PayrollYear", "PayrollYear")
                        .WithMany()
                        .HasForeignKey("PayrollYearGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrantTrackerYear");

                    b.Navigation("PayrollYear");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Session", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.Activity", "Activity")
                        .WithMany("Sessions")
                        .HasForeignKey("ActivityGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.FundingSource", "FundingSource")
                        .WithMany("Sessions")
                        .HasForeignKey("FundingSourceGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.OrganizationType", "OrganizationType")
                        .WithMany("Sessions")
                        .HasForeignKey("OrganizationTypeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.OrganizationYear", "OrganizationYear")
                        .WithMany("Sessions")
                        .HasForeignKey("OrganizationYearGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.PartnershipType", "PartnershipType")
                        .WithMany("Sessions")
                        .HasForeignKey("PartnershipTypeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.SessionType", "SessionType")
                        .WithMany("Sessions")
                        .HasForeignKey("SessionTypeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("FundingSource");

                    b.Navigation("OrganizationType");

                    b.Navigation("OrganizationYear");

                    b.Navigation("PartnershipType");

                    b.Navigation("SessionType");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionBlackoutDate", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.Session", "Session")
                        .WithMany("BlackoutDates")
                        .HasForeignKey("SessionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionDaySchedule", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.Session", "Session")
                        .WithMany("DaySchedules")
                        .HasForeignKey("SessionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionGrade", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.LookupValue", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.Session", "Session")
                        .WithMany("Grades")
                        .HasForeignKey("SessionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionObjective", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.Objective", "Objective")
                        .WithMany("SessionObjectives")
                        .HasForeignKey("ObjectiveGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.Session", "Session")
                        .WithMany("SessionObjectives")
                        .HasForeignKey("SessionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionTimeSchedule", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.SessionDaySchedule", "DaySchedule")
                        .WithMany("TimeSchedules")
                        .HasForeignKey("SessionDayGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DaySchedule");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentAttendanceRecord", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.AttendanceRecord", "AttendanceRecord")
                        .WithMany("StudentAttendance")
                        .HasForeignKey("AttendanceRecordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.StudentSchoolYear", "StudentSchoolYear")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("StudentSchoolYearGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceRecord");

                    b.Navigation("StudentSchoolYear");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentAttendanceTimeRecord", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.StudentAttendanceRecord", "StudentAttendanceRecord")
                        .WithMany("TimeRecords")
                        .HasForeignKey("StudentAttendanceRecordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentAttendanceRecord");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentGroup", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.OrganizationYear", "OrganizationYear")
                        .WithMany("StudentGroups")
                        .HasForeignKey("OrganizationYearGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationYear");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentGroupItem", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.StudentGroup", "Group")
                        .WithMany("Items")
                        .HasForeignKey("GroupGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.StudentSchoolYear", "StudentSchoolYear")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentSchoolYearGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("StudentSchoolYear");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentRegistration", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.SessionDaySchedule", "DaySchedule")
                        .WithMany("StudentRegistrations")
                        .HasForeignKey("DayScheduleGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.StudentSchoolYear", "StudentSchoolYear")
                        .WithMany("SessionRegistrations")
                        .HasForeignKey("StudentSchoolYearGuid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DaySchedule");

                    b.Navigation("StudentSchoolYear");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentSchoolYear", b =>
                {
                    b.HasOne("GrantTracker.Dal.Schema.OrganizationYear", "OrganizationYear")
                        .WithMany("StudentSchoolYears")
                        .HasForeignKey("OrganizationYearGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrantTracker.Dal.Schema.Student", "Student")
                        .WithMany("StudentSchoolYears")
                        .HasForeignKey("StudentGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationYear");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Activity", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.AttendanceRecord", b =>
                {
                    b.Navigation("FamilyAttendance");

                    b.Navigation("InstructorAttendance");

                    b.Navigation("StudentAttendance");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.FundingSource", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorAttendanceRecord", b =>
                {
                    b.Navigation("TimeRecords");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorSchoolYear", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("Identity");

                    b.Navigation("SessionRegistrations");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.InstructorStatus", b =>
                {
                    b.Navigation("InstructorYears");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.LookupDefinition", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Objective", b =>
                {
                    b.Navigation("SessionObjectives");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Organization", b =>
                {
                    b.Navigation("AttendanceGoals");

                    b.Navigation("BlackoutDates");

                    b.Navigation("Years");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.OrganizationType", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.OrganizationYear", b =>
                {
                    b.Navigation("InstructorSchoolYears");

                    b.Navigation("Sessions");

                    b.Navigation("StudentGroups");

                    b.Navigation("StudentSchoolYears");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.PartnershipType", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.PayrollYear", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Session", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("BlackoutDates");

                    b.Navigation("DaySchedules");

                    b.Navigation("Grades");

                    b.Navigation("InstructorRegistrations");

                    b.Navigation("SessionObjectives");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionDaySchedule", b =>
                {
                    b.Navigation("StudentRegistrations");

                    b.Navigation("TimeSchedules");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.SessionType", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentAttendanceRecord", b =>
                {
                    b.Navigation("TimeRecords");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentGroup", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.StudentSchoolYear", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("FamilyAttendance");

                    b.Navigation("SessionRegistrations");

                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Year", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Instructor", b =>
                {
                    b.Navigation("InstructorSchoolYears");
                });

            modelBuilder.Entity("GrantTracker.Dal.Schema.Student", b =>
                {
                    b.Navigation("StudentSchoolYears");
                });
#pragma warning restore 612, 618
        }
    }
}
